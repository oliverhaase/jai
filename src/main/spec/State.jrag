
aspect State {

	syn State Method.createInitialState() =
		new RegularState(createInitialLocalVars(), createInitialOpStack(),
			createInitialFieldEdges());


	// set of incoming states, statesIn() 	
		
	coll Set<State> Instruction.statesIn() circular [new HashSet<State>()] with addAll root Method;
	Instruction contributes statesOut() to Instruction.statesIn() for each succ();

	syn Set<State> EntryPoint.statesIn() = Collections.singleton(method().createInitialState());
	
		
	// set of outgoing states, statesOut()
	
	syn Set<State> Instruction.statesOut() circular [new HashSet<State>()]; 
      	
    eq Instruction.statesOut() {
    	Set<State> resultSet = new HashSet<State>();

		for ( State stateIn : statesIn() ) {
		   if (stateIn instanceof ExceptionState)
		      resultSet.add(stateIn);
	       else
		      resultSet.add(transferState(((RegularState) stateIn))); 
	    }
		   
		return resultSet;   
	}	
				
	
	eq ReturnInstruction.statesOut() = null;
	eq Areturn.statesOut() = null;
	
	
	// transfer attribute
	
	syn State Instruction.transferState(RegularState stateIn) =
		new RegularState(transferLocalVars(stateIn.getLocalVars()),
				transferOpStack(stateIn.getOpStack()),
				transferFieldEdges(stateIn.getFieldEdges())); 	
		
	eq StoreInstruction.transferState(RegularState stateIn) =
		new RegularState(transferLocalVars(stateIn.getLocalVars(), stateIn.getOpStack().top()),
				transferOpStack(stateIn.getOpStack()),
				transferFieldEdges(stateIn.getFieldEdges()));
	
	eq LoadInstruction.transferState(RegularState stateIn) =
		new RegularState(transferLocalVars(stateIn.getLocalVars()),
				transferOpStack(stateIn.getOpStack(), stateIn.getLocalVars().get(getIndex())),
				transferFieldEdges(stateIn.getFieldEdges()));
	
	eq FieldAssignmentInstruction.transferState(RegularState stateIn) {
    	// objectref.fieldName = top(opstack)
 
	    ReferenceSlot objectRef = getStoreObjectRef(stateIn.getOpStack());
	    
        if ( objectRef.isNullReference() )
            return new ExceptionState(stateIn.getFieldEdges()); // illegal State (NullPointerException)
        
        if ( getFieldType() instanceof PrimitiveType ) 
			return new RegularState(
				stateIn.getLocalVars(),
                transferOpStack(stateIn.getOpStack()),
				stateIn.getFieldEdges());
					
        return new RegularState(stateIn.getLocalVars(),
				transferOpStack(stateIn.getOpStack()),
                transferFieldEdges(stateIn.getFieldEdges(), objectRef, 
                                   (ReferenceSlot) stateIn.getOpStack().top()));	
    }
    
    syn ReferenceSlot FieldAssignmentInstruction.getStoreObjectRef(OpStack opStack) = null;     
    syn ReferenceSlot PutField.getStoreObjectRef(OpStack opStack) =  (ReferenceSlot) opStack.pop().top();
    syn ReferenceSlot Aastore.getStoreObjectRef(OpStack opStack) =   (ReferenceSlot) opStack.pop().pop().top();
    syn ReferenceSlot PutStatic.getStoreObjectRef(OpStack opStack) = new ReferenceSlot(getGlobalObject());
    
    eq FieldLoadInstruction.transferState(RegularState stateIn) {
    	// push objectref.fieldName onto opstack
    
    	ReferenceSlot objectRef = getLoadObjectRef(stateIn.getOpStack());

		if ( objectRef.isNullReference() )
			return new ExceptionState(stateIn.getFieldEdges()); // illegal State (NullPointerException)
       
		if ( getFieldType() instanceof PrimitiveType ) 
			return new RegularState(
				stateIn.getLocalVars(),
                transferOpStack(stateIn.getOpStack(), PrimitiveSlot.getInstance()),
				stateIn.getFieldEdges());
            
       	Set<ObjectNode> resultObjects = new HashSet<ObjectNode>();
       	Set<FieldEdge> newEdges = new HashSet<FieldEdge>();
	        
	    for ( ObjectNode objectNode : objectRef ) {
			if ( objectNode instanceof GlobalObject ) 
				resultObjects.add(objectNode);				

			if ( objectNode instanceof RealObject ) 
				resultObjects.addAll(stateIn.getFieldEdges().getObjectsOfField(objectNode, getFieldName()));
				
			if ( objectNode instanceof PhantomObject ) {
				resultObjects.addAll(stateIn.getFieldEdges().getObjectsOfField(objectNode, getFieldName()));
				resultObjects.add(this);
				newEdges.add(new FieldEdge(objectNode, getFieldName(), this));
			}				
		}
	                               
        return new RegularState(transferLocalVars(stateIn.getLocalVars()),
                transferOpStack(stateIn.getOpStack(), new ReferenceSlot(resultObjects)),
                transferFieldEdges(stateIn.getFieldEdges(), newEdges));
    }
    
    
    syn ReferenceSlot FieldLoadInstruction.getLoadObjectRef(OpStack opStack) = null;
    syn ReferenceSlot GetField.getLoadObjectRef(OpStack opStack) =  (ReferenceSlot) opStack.top();
    syn ReferenceSlot Aaload.getLoadObjectRef(OpStack opStack) =    (ReferenceSlot) opStack.pop().top();      
    syn ReferenceSlot GetStatic.getLoadObjectRef(OpStack opStack) = new ReferenceSlot(getGlobalObject());
    
    
    eq EarlyBoundInvokeInstruction.transferState(RegularState stateIn) {
        ReferenceSlot objectRef = (ReferenceSlot) stateIn.getOpStack().pop(getConsumeStack()).top();
        
        if (objectRef.isNullReference()) // TODO notwendig?
            return new ExceptionState(stateIn.getFieldEdges()); // illegal State (NullPointerException)
            
        Method targetMethod = getTargetMethod();
        
        return new RegularState(transferLocalVars(stateIn.getLocalVars()),
                transferOpStack(stateIn.getOpStack()),
                transferFieldEdges(stateIn.getFieldEdges()));
    }
    
    eq LateBoundInvokeInstruction.transferState(RegularState stateIn) {
        ReferenceSlot objectRef = (ReferenceSlot) stateIn.getOpStack().pop(getConsumeStack()).top();
        
        if (objectRef.isNullReference())
            return new ExceptionState(stateIn.getFieldEdges()); // illegal State (NullPointerException)
            
        Set<Method> targetMethod = getTargetMethods(objectRef);
        
        return new RegularState(transferLocalVars(stateIn.getLocalVars()),
                transferOpStack(stateIn.getOpStack()),
                transferFieldEdges(stateIn.getFieldEdges()));
    }
    
}