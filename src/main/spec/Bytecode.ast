

Program ::= ByteCodeClass* GlobalObject;

GlobalObject;

ByteCodeClass ::= <Name:String> <SuperClass:String> <IsFinal:boolean> Method*;

Method ::= <IsAbstract:boolean> <IsNative:boolean> <IsPrivate:boolean> <IsFinal:boolean>
           <MethodName:String> <SignatureIndex:int> Argument:Type* ReturnType:TypeOrVoid
            <MaxLocals:int>  Instruction*;

abstract TypeOrVoid;

Type : TypeOrVoid;
Void : TypeOrVoid;

PrimitiveType : Type ::= <Size:int>;
ReferenceType : Type ::= <Type:String>;


abstract Instruction ::= <Label:String> <Position:int> <ConsumeStack:int> <ProduceStack:int> <ExceptionHandlers:java.util.Set<Integer>>;

EntryPoint : Instruction;

SimpleInstruction : Instruction;

ArrayLength : Instruction;
AconstNull : Instruction;
Athrow : Instruction;


abstract FieldAssignmentInstruction : Instruction ::= <FieldName:String>;
PutField : FieldAssignmentInstruction;
Aastore : FieldAssignmentInstruction;
PutStatic : FieldAssignmentInstruction;

abstract FieldLoadInstruction : Instruction ::= <FieldName:String> <FieldType:org.apache.bcel.generic.Type>;
GetField : FieldLoadInstruction;
Aaload : FieldLoadInstruction;
GetStatic : FieldLoadInstruction;

Ldc : Instruction ::= <ConstantType:org.apache.bcel.generic.Type>;

GotoInstruction : Instruction ::= <TargetPosition:int>;
BranchInstruction : Instruction ::= <TargetPositions:int[]>;


abstract InvokeInstruction : Instruction ::= <LoadClass:String> <MethodName:String> Argument:Type* ReturnType:TypeOrVoid;
StaticInvokeInstruction : InvokeInstruction;
InvokeSpecial : StaticInvokeInstruction;
InvokeStatic : StaticInvokeInstruction;

DynamicInvokeInstruction : InvokeInstruction;
InvokeInterface : DynamicInvokeInstruction;
InvokeVirtual : DynamicInvokeInstruction;


abstract NewInstruction : Instruction  ::= <Type:String>;
New : NewInstruction;
NewArray : NewInstruction;
ANewArray : NewInstruction;
MultiANewArray : NewInstruction;


LoadInstruction : Instruction ::= <Index:int>;
StoreInstruction : Instruction ::= <Index:int>;

abstract StackInstruction : Instruction;
DUP : StackInstruction;
DUP_X1 : StackInstruction;
DUP_X2 : StackInstruction;
DUP2 : StackInstruction;
DUP2_X1 : StackInstruction;
DUP2_X2 : StackInstruction;
SWAP : StackInstruction;

ReturnInstruction : Instruction ::= <Size:int>;
Areturn : ReturnInstruction;


ExitPoint : Instruction;
