
aspect OpStack {
	
	syn OpStack Method.createInitialOpStack() {
		return OpStack.getEmptyStack();
	}
	
	syn OpStack Instruction.transferOpStack(OpStack opStackIn, Slot slot) = 
		getProduceStack() == getConsumeStack()  ?
			opStackIn :
			getProduceStack() > getConsumeStack()  ? 
				opStackIn.push(PrimitiveSlot.getInstance(), getProduceStack() - getConsumeStack()) :
				opStackIn.pop(getConsumeStack() - getProduceStack());
		
	eq ArrayLength.transferOpStack(OpStack opStackIn, Slot slot) = 
		opStackIn.pop().push(PrimitiveSlot.getInstance());
		
	eq Athrow.transferOpStack(OpStack opStackIn, Slot slot) =
		opStackIn.pop(getConsumeStack()).push(opStackIn.top()); 		
		
	eq FieldLoadInstruction.transferOpStack(OpStack opStackIn, Slot slot) =
		opStackIn.pop(getConsumeStack()).push(slot, getProduceStack());
		
	eq NewInstruction.transferOpStack(OpStack opStackIn, Slot slot) =
		opStackIn.pop(getConsumeStack()).push(new ReferenceSlot(this));	
		
	eq LoadInstruction.transferOpStack(OpStack opStackIn, Slot slot) =
		opStackIn.push(slot, getProduceStack());
			
	eq DUP.transferOpStack(OpStack opStackIn, Slot slot) = opStackIn.push(opStackIn.top());

	eq DUP_X1.transferOpStack(OpStack opStackIn, Slot slot) = 
		opStackIn.pop().pop().push(opStackIn.top()).push(opStackIn.pop().top()).push(opStackIn.top());

	eq DUP_X2.transferOpStack(OpStack opStackIn, Slot slot) = 
		opStackIn.pop().pop().pop().push(opStackIn.top())
						.push(opStackIn.pop().pop().top())
						.push(opStackIn.pop().top())
						.push(opStackIn.top());
	
	eq DUP2.transferOpStack(OpStack opStackIn, Slot slot) =
		opStackIn.push(opStackIn.pop().top()).push(opStackIn.top());
	
	eq DUP2_X1.transferOpStack(OpStack opStackIn, Slot slot) =
		opStackIn.pop().pop().pop()
						.push(opStackIn.pop().top())
						.push(opStackIn.top())
						.push(opStackIn.pop().pop().top())
						.push(opStackIn.pop().top())
						.push(opStackIn.top());
	
	eq DUP2_X2.transferOpStack(OpStack opStackIn, Slot slot) =
		 opStackIn.pop().pop().pop().pop()
						.push(opStackIn.pop().top())
						.push(opStackIn.top())
						.push(opStackIn.pop().pop().pop().top())
						.push(opStackIn.pop().pop().top())
						.push(opStackIn.pop().top())
						.push(opStackIn.top());

	eq SWAP.transferOpStack(OpStack opStackIn, Slot slot) = 
		opStackIn.pop().pop().push(opStackIn.top()).push(opStackIn.pop().top());
		
	
/*

	
	
	eq AconstNull.statesOut() =
		States.processStates(statesIn(), new StateProcessor() {
			@Override public State process(State original) {
				Heap heap = original.getHeap();
				ReferenceNode ref = new ReferenceNode(getPosition(), Category.LOCAL);
				heap = heap.addReferenceAndTarget(ref, InternalObject.getNullObject()); 
				return new State(
					original.getLocalVars(), 
					opStackIn.pop(getConsumeStack()).push(ref), 
					heap); 
			}
		});
	

	

	eq Ldc.statesOut() =
		States.processStates(statesIn(), new StateProcessor() {
			@Override public State process(State original) {			
				return new State(
					original.getLocalVars(), 
					opStackIn.push(
						(getConstantType() instanceof org.apache.bcel.generic.ReferenceType ) ? 
						ReferenceNode.getGlobalRef() 
						: DontCareSlot.NORMAL_SLOT), 
					original.getHeap());
			}
		});	

				
	eq InvokeInstruction.statesOut() {
		Set<State> result = new HashSet<State>();

		for ( State frameIn : statesIn() ) 
			for ( Method targetMethod : resolveTargetMethod() ) 
				result.add(frameIn.applyMethodSummary(
					targetMethod.methodSummary(), 
					getConsumeStack(), 
					getProduceStack(), 
					getReturnType(),
					getPosition()));
					
		return result;
	}	
		
	
*/	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}